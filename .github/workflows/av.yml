name: Publish

on:
  push:
  issue_comment:

jobs:
  mobsf:
    name: Run MobSF (Android)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Start MobSF Container
        run: |
          docker pull opensecurity/mobile-security-framework-mobsf:latest
          docker run -it --rm -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest

      - name: Scan APK with MobSF
        run: |
          # Wait for MobSF to be ready (optional, but good practice)
          sleep 10

          # Upload the APK and get the hash
          response=$(curl -s -X POST -F "file=@./samples/diva-beta.apk" -H "Authorization: mobsf http://localhost:8000/api/v1/upload)

          file_hash=$(echo "$response" | jq -r .hash)

          if [ "$file_hash" == "null" ]; then
            echo "Error uploading file. Response: $response"
            exit 1
          fi

          echo "File uploaded with hash: $file_hash"

          # Start the analysis
          scan_response=$(curl -s -X POST -F "scan_type=apk" -F "hash=$file_hash" -H "Authorization: mobsf http://localhost:8000/api/v1/scan)

          echo "Scan triggered. Response: $scan_response"

          # Wait for the scan to finish
          # In a real pipeline, you would poll the status until it's done. For this example, we'll wait a bit.
          sleep 60

          # Retrieve the report
          report=$(curl -s -X POST -F "hash=$file_hash" -H "Authorization: mobsf http://localhost:8000/api/v1/report_json)

          # Check if the report is valid and has security issues
          if echo "$report" | jq -e '.vulnerabilities | length > 0'; then
            echo "Vulnerabilities found! MobSF is working correctly."
            # Add logic to fail the build if critical issues are found
          else
            echo "No vulnerabilities found (or report is empty)."
            # Add logic for what to do when no issues are found
          fi

  clamav:
    name: Run ClamAV (Linux mainly)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Start ClamAV daemon clamd
        uses: toblux/start-clamd-github-action@v0.2.1
        with: # Custom inputs are optional (these are the default values)
          unix_socket: /tmp/clamd.socket
          tcp_port: 3310
          stream_max_length: 1M

      - name: Ping clamd on TCP port 3310
        run: echo PING | nc localhost 3310

      - name: Ping clamd using the Unix socket
        run: echo PING | nc -U /tmp/clamd.socket

      - name: Write GitHub event to file
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            fs.writeFileSync("./event.json", JSON.stringify(context.payload));

      - name: Installing Dependencies and run bot
        run: |
          sudo systemctl stop clamav-freshclam.service
          sudo freshclam || true
          sudo systemctl start clamav-freshclam.service

          sudo /etc/init.d/clamav-daemon start

          npm i -g pnpm
          pnpm install

          node issue.js
